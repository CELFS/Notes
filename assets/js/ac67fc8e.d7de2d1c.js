"use strict";(self.webpackChunknotes_new=self.webpackChunknotes_new||[]).push([[4890],{3774:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var s=r(36672);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},65067:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"introduction_to_operating_system/01-3_code","title":"01-3_code","description":"01 \u865a\u62df\u5316\uff08\u4ee3\u7801\uff09","source":"@site/docs/06_introduction_to_operating_system/01-3_code.md","sourceDirName":"06_introduction_to_operating_system","slug":"/introduction_to_operating_system/01-3_code","permalink":"/Notes/docs/introduction_to_operating_system/01-3_code","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"sidebar_label":"01 \u865a\u62df\u5316\uff08\u4ee3\u7801\uff09"},"sidebar":"tutorialSidebar","previous":{"title":"01-2 \u865a\u62df\u5316\uff08\u5185\u5b58\u865a\u62df\u5316\uff09","permalink":"/Notes/docs/introduction_to_operating_system/01-2_\u865a\u62df\u5316_\u5185\u5b58"},"next":{"title":"02 \u5e76\u53d1","permalink":"/Notes/docs/introduction_to_operating_system/02-1_\u5e76\u53d1"}}');var i=r(23420),t=r(3774);const l={sidebar_label:"01 \u865a\u62df\u5316\uff08\u4ee3\u7801\uff09"},d=void 0,c={},a=[{value:"01 \u865a\u62df\u5316\uff08\u4ee3\u7801\uff09",id:"01-\u865a\u62df\u5316\u4ee3\u7801",level:3},{value:"\u7b2c2\u7ae0 \u64cd\u4f5c\u7cfb\u7edf\u4ecb\u7ecd",id:"\u7b2c2\u7ae0-\u64cd\u4f5c\u7cfb\u7edf\u4ecb\u7ecd",level:3},{value:"\u7b2c3\u7ae0 \u5173\u4e8e\u865a\u62df\u5316\u7684\u5bf9\u8bdd",id:"\u7b2c3\u7ae0-\u5173\u4e8e\u865a\u62df\u5316\u7684\u5bf9\u8bdd",level:3},{value:"\u7b2c4\u7ae0 \u62bd\u8c61\uff1a\u8fdb\u7a0b",id:"\u7b2c4\u7ae0-\u62bd\u8c61\u8fdb\u7a0b",level:3},{value:"\u7b2c5\u7ae0 \u63d2\u53d9\uff1a\u8fdb\u7a0bAPI",id:"\u7b2c5\u7ae0-\u63d2\u53d9\u8fdb\u7a0bapi",level:3},{value:"\u7b2c6\u7ae0 \u673a\u5236\uff1a\u53d7\u9650\u76f4\u63a5\u6267\u884c",id:"\u7b2c6\u7ae0-\u673a\u5236\u53d7\u9650\u76f4\u63a5\u6267\u884c",level:3},{value:"\u7b2c7\u7ae0 \u8fdb\u7a0b\u8c03\u5ea6\uff1a\u4ecb\u7ecd",id:"\u7b2c7\u7ae0-\u8fdb\u7a0b\u8c03\u5ea6\u4ecb\u7ecd",level:3},{value:"\u7b2c8\u7ae0 \u8c03\u5ea6\uff1a\u591a\u7ea7\u53cd\u9988\u961f\u5217",id:"\u7b2c8\u7ae0-\u8c03\u5ea6\u591a\u7ea7\u53cd\u9988\u961f\u5217",level:3},{value:"\u7b2c9\u7ae0 \u8c03\u5ea6\uff1a\u6bd4\u4f8b\u4efd\u989d",id:"\u7b2c9\u7ae0-\u8c03\u5ea6\u6bd4\u4f8b\u4efd\u989d",level:3},{value:"\u7b2c10\u7ae0 \u591a\u5904\u7406\u5668\u8c03\u5ea6\uff08\u9ad8\u7ea7\uff09",id:"\u7b2c10\u7ae0-\u591a\u5904\u7406\u5668\u8c03\u5ea6\u9ad8\u7ea7",level:3},{value:"\u7b2c11\u7ae0 \u5173\u4e8eCPU\u865a\u62df\u5316\u7684\u603b\u7ed3\u5bf9\u8bdd",id:"\u7b2c11\u7ae0-\u5173\u4e8ecpu\u865a\u62df\u5316\u7684\u603b\u7ed3\u5bf9\u8bdd",level:3},{value:"\u7b2c12\u7ae0 \u5173\u4e8e\u5185\u5b58\u865a\u62df\u5316\u7684\u5bf9\u8bdd",id:"\u7b2c12\u7ae0-\u5173\u4e8e\u5185\u5b58\u865a\u62df\u5316\u7684\u5bf9\u8bdd",level:3},{value:"\u7b2c13\u7ae0 \u62bd\u8c61\uff1a\u5730\u5740\u7a7a\u95f4",id:"\u7b2c13\u7ae0-\u62bd\u8c61\u5730\u5740\u7a7a\u95f4",level:3},{value:"\u7b2c14\u7ae0 \u63d2\u53d9\uff1a\u5185\u5b58\u64cd\u4f5cAPI",id:"\u7b2c14\u7ae0-\u63d2\u53d9\u5185\u5b58\u64cd\u4f5capi",level:3},{value:"\u7b2c15\u7ae0 \u673a\u5236\uff1a\u5730\u5740\u8f6c\u6362",id:"\u7b2c15\u7ae0-\u673a\u5236\u5730\u5740\u8f6c\u6362",level:3},{value:"\u7b2c16\u7ae0 \u5206\u6bb5",id:"\u7b2c16\u7ae0-\u5206\u6bb5",level:3},{value:"\u7b2c17\u7ae0 \u7a7a\u95f2\u7a7a\u95f4\u7ba1\u7406",id:"\u7b2c17\u7ae0-\u7a7a\u95f2\u7a7a\u95f4\u7ba1\u7406",level:3},{value:"\u7b2c18\u7ae0 \u5206\u9875\uff1a\u4ecb\u7ecd",id:"\u7b2c18\u7ae0-\u5206\u9875\u4ecb\u7ecd",level:3},{value:"\u7b2c19\u7ae0 \u5206\u9875\uff1a\u5feb\u901f\u5730\u5740\u8f6c\u6362\uff08TLB\uff09",id:"\u7b2c19\u7ae0-\u5206\u9875\u5feb\u901f\u5730\u5740\u8f6c\u6362tlb",level:3},{value:"\u7b2c20\u7ae0 \u5206\u9875\uff1a\u8f83\u5c0f\u7684\u8868",id:"\u7b2c20\u7ae0-\u5206\u9875\u8f83\u5c0f\u7684\u8868",level:3},{value:"\u7b2c21\u7ae0 \u8d85\u8d8a\u7269\u7406\u5185\u5b58\uff1a\u673a\u5236",id:"\u7b2c21\u7ae0-\u8d85\u8d8a\u7269\u7406\u5185\u5b58\u673a\u5236",level:3},{value:"\u7b2c22\u7ae0 \u8d85\u8d8a\u7269\u7406\u5185\u5b58\uff1a\u7b56\u7565",id:"\u7b2c22\u7ae0-\u8d85\u8d8a\u7269\u7406\u5185\u5b58\u7b56\u7565",level:3},{value:"\u7b2c23\u7ae0 VAX/VMS\u865a\u62df\u5185\u5b58\u7cfb\u7edf",id:"\u7b2c23\u7ae0-vaxvms\u865a\u62df\u5185\u5b58\u7cfb\u7edf",level:3},{value:"\u7b2c24\u7ae0 \u5185\u5b58\u865a\u62df\u5316\u603b\u7ed3\u5bf9\u8bdd",id:"\u7b2c24\u7ae0-\u5185\u5b58\u865a\u62df\u5316\u603b\u7ed3\u5bf9\u8bdd",level:3}];function o(e){const n={code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"01-\u865a\u62df\u5316\u4ee3\u7801",children:"01 \u865a\u62df\u5316\uff08\u4ee3\u7801\uff09"}),"\n",(0,i.jsx)(n.p,{children:"Date\uff1a2023/04/06 19:34:59"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"[TOC]"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c2\u7ae0-\u64cd\u4f5c\u7cfb\u7edf\u4ecb\u7ecd",children:"\u7b2c2\u7ae0 \u64cd\u4f5c\u7cfb\u7edf\u4ecb\u7ecd"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:'// \u5faa\u73af\u6253\u5370\u7684\u4ee3\u7801 cpu.c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <sys/time.h>\r\n#include <assert.h>\r\n#include "common.h"\r\n\r\nint\r\nmain(int argc, char *argv[])\r\n{\r\n   if (argc != 2) {\r\n        fprintf(stderr, "usage: cpu <string>\\n");\r\n       exit(1);\r\n   }\r\n   char *str = argv[1];\r\n   while (1) {\r\n       Spin(1);\r\n       printf("%s\\n", str);\r\n   }\r\n   return 0;\r\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:'// mem.c\r\n#include <unistd.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include "common.h"\r\n\r\nint\r\nmain(int argc, char *argv[])\r\n{\r\n    int *p = malloc(sizeof(int));              // a1\r\n    assert(p != NULL);\r\n    printf("(%d) memory address of p: %08x\\n",\r\n           getpid(), (unsigned) p);            // a2\r\n    *p = 0;                                    // a3\r\n    while (1) {\r\n        Spin(1);\r\n        *p = *p + 1;\r\n         printf("(%d) p: %d\\n", getpid(), *p); // a4\r\n    }\r\n    return 0;\r\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:'// threads.c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include "common.h"\r\n\r\nvolatile int counter = 0;\r\nint loops;\r\n\r\nvoid *worker(void *arg) {\r\n    int i;\r\n    for (i = 0; i < loops; i++) {\r\n        counter++;\r\n    }\r\n    return NULL;\r\n}\r\n\r\nint\r\nmain(int argc, char *argv[])\r\n{ \r\n    if (argc != 2) {\r\n        fprintf(stderr, "usage: threads <value>\\n");\r\n        exit(1);\r\n    }\r\n    loops = atoi(argv[1]);\r\n    pthread_t p1, p2;\r\n    printf("Initial value : %d\\n", counter);\r\n\r\n    Pthread_create(&p1, NULL, worker, NULL);\r\n    Pthread_create(&p2, NULL, worker, NULL);\r\n    Pthread_join(p1, NULL);\r\n    Pthread_join(p2, NULL);\r\n    printf("Final value    : %d\\n", counter);\r\n    return 0;\r\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c3\u7ae0-\u5173\u4e8e\u865a\u62df\u5316\u7684\u5bf9\u8bdd",children:"\u7b2c3\u7ae0 \u5173\u4e8e\u865a\u62df\u5316\u7684\u5bf9\u8bdd"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c4\u7ae0-\u62bd\u8c61\u8fdb\u7a0b",children:"\u7b2c4\u7ae0 \u62bd\u8c61\uff1a\u8fdb\u7a0b"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"// xv6 \u7684 proc \u7ed3\u6784\r\n// the registers xv6 will save and restore\r\n// to stop and subsequently restart a process\r\nstruct context {\r\n  int eip;\r\n  int esp;\r\n  int ebx;\r\n  int ecx;\r\n  int edx;\r\n  int esi;\r\n  int edi;\r\n  int ebp;\r\n};\r\n\r\n// the different states a process can be in\r\nenum proc_state { UNUSED, EMBRYO, SLEEPING,\r\n                  RUNNABLE, RUNNING, ZOMBIE };\r\n\r\n// the information xv6 tracks about each process\r\n// including its register context and state\r\nstruct proc {\r\n  char *mem;                   // Start of process memory\r\n  uint sz;                     // Size of process memory\r\n  char *kstack;                // Bottom of kernel stack\r\n                               // for this process\r\n  enum proc_state state;       // Process state\r\n  int pid;                     // Process ID\r\n  struct proc *parent;         // Parent process\r\n  void *chan;                  // If non-zero, sleeping on chan\r\n  int killed;                  // If non-zero, have been killed\r\n  struct file *ofile[NOFILE];  // Open files\r\n  struct inode *cwd;           // Current directory\r\n  struct context context;      // Switch here to run process\r\n  struct trapframe *tf;        // Trap frame for the\r\n                               // current interrupt\r\n};\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c5\u7ae0-\u63d2\u53d9\u8fdb\u7a0bapi",children:"\u7b2c5\u7ae0 \u63d2\u53d9\uff1a\u8fdb\u7a0bAPI"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:'// p1.c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n\r\nint main(int argc, char *argv[]) {\r\n\r\n    printf("hello world (pid:%d)\\n", (int) getpid());\r\n    int rc = fork();\r\n    if (rc < 0) {\r\n        fprintf(stderr, "fork failed\\n");\r\n        exit(1);\r\n    } else if (rc == 0) {\r\n        printf("hello, I am child (pid:%d)\\n", (int) getpid());\r\n    } else {\r\n        printf("hello, I am parent of %d (pid:%d)\\n", rc, (int) getpid());\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"celfs@ub code_from_book % ./a.out\r\nhello world (pid:8852)\r\nhello, I am parent of 8853 (pid:8852)\r\nhello, I am child (pid:8853)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c6\u7ae0-\u673a\u5236\u53d7\u9650\u76f4\u63a5\u6267\u884c",children:"\u7b2c6\u7ae0 \u673a\u5236\uff1a\u53d7\u9650\u76f4\u63a5\u6267\u884c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Perl",children:"# xv6\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u4ee3\u7801 (\u5fc5\u987b\u77e5\u9053\u4e00\u70b9x86\u548c\u4e00\u70b9xv6)    \r\n# void swtch(struct context **old, struct context *new);\r\n#\r\n# Save current register context in old and then load register context from new.\r\n.globl swtch\r\nswtch:\r\n  # Save old registers\r\n  movl 4(%esp), %eax # put old ptr into eax\r\n  popl 0(%eax)        # save the old IP\r\n  movl %esp, 4(%eax) # and stack\r\n  movl %ebx, 8(%eax) # and other registers\r\n  movl %ecx, 12(%eax)\r\n  movl %edx, 16(%eax)\r\n  movl %esi, 20(%eax)\r\n  movl %edi, 24(%eax)\r\n  movl %ebp, 28(%eax)\r\n\r\n  # Load new registers\r\n  movl 4(%esp), %eax # put new ptr into eax\r\n  movl 28(%eax), %ebp # restore other registers\r\n  movl 24(%eax), %edi\r\n  movl 20(%eax), %esi\r\n  movl 16(%eax), %edx\r\n  movl 12(%eax), %ecx\r\n  movl 8(%eax), %ebx\r\n  movl 4(%eax), %esp  # stack is switched here\r\n  pushl 0(%eax)       # return addr put in place\r\n  ret                 # finally return into new ctxt\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c7\u7ae0-\u8fdb\u7a0b\u8c03\u5ea6\u4ecb\u7ecd",children:"\u7b2c7\u7ae0 \u8fdb\u7a0b\u8c03\u5ea6\uff1a\u4ecb\u7ecd"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c8\u7ae0-\u8c03\u5ea6\u591a\u7ea7\u53cd\u9988\u961f\u5217",children:"\u7b2c8\u7ae0 \u8c03\u5ea6\uff1a\u591a\u7ea7\u53cd\u9988\u961f\u5217"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c9\u7ae0-\u8c03\u5ea6\u6bd4\u4f8b\u4efd\u989d",children:"\u7b2c9\u7ae0 \u8c03\u5ea6\uff1a\u6bd4\u4f8b\u4efd\u989d"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C++",children:"// counter: used to track if we've found the winner yet\r\nint counter = 0;\r\n// winner: use some call to a random number generator to\r\n//         get a value, between 0 and the total # of tickets\r\nint winner = getrandom(0, totaltickets);\r\n// current: use this to walk through the list of jobs\r\nnode_t *current = head;\r\n\r\n// loop until the sum of ticket values is > the winner\r\nwhile (current) {\r\n    counter = counter + current->tickets;\r\n    if (counter > winner)\r\n        break; // found the winner\r\n    current = current->next;\r\n}\r\n// 'current' is the winner: schedule it...\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c10\u7ae0-\u591a\u5904\u7406\u5668\u8c03\u5ea6\u9ad8\u7ea7",children:"\u7b2c10\u7ae0 \u591a\u5904\u7406\u5668\u8c03\u5ea6\uff08\u9ad8\u7ea7\uff09"}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c11\u7ae0-\u5173\u4e8ecpu\u865a\u62df\u5316\u7684\u603b\u7ed3\u5bf9\u8bdd",children:"\u7b2c11\u7ae0 \u5173\u4e8eCPU\u865a\u62df\u5316\u7684\u603b\u7ed3\u5bf9\u8bdd"}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c12\u7ae0-\u5173\u4e8e\u5185\u5b58\u865a\u62df\u5316\u7684\u5bf9\u8bdd",children:"\u7b2c12\u7ae0 \u5173\u4e8e\u5185\u5b58\u865a\u62df\u5316\u7684\u5bf9\u8bdd"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c13\u7ae0-\u62bd\u8c61\u5730\u5740\u7a7a\u95f4",children:"\u7b2c13\u7ae0 \u62bd\u8c61\uff1a\u5730\u5740\u7a7a\u95f4"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:'#include <stdio.h>\r\n#include <stdlib.h>\r\nint main(int argc, char *argv[]) {\r\n    printf("location of code : %p\\n", (void *) main);\r\n    printf("location of heap : %p\\n", (void *) malloc(1));\r\n    int x = 3;\r\n    printf("location of stack : %p\\n", (void *) &x);\r\n    return x;\r\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c14\u7ae0-\u63d2\u53d9\u5185\u5b58\u64cd\u4f5capi",children:"\u7b2c14\u7ae0 \u63d2\u53d9\uff1a\u5185\u5b58\u64cd\u4f5cAPI"}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c15\u7ae0-\u673a\u5236\u5730\u5740\u8f6c\u6362",children:"\u7b2c15\u7ae0 \u673a\u5236\uff1a\u5730\u5740\u8f6c\u6362"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c16\u7ae0-\u5206\u6bb5",children:"\u7b2c16\u7ae0 \u5206\u6bb5"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pseudocode",children:"1    // get top 2 bits of 14-bit VA\r\n2    Segment = (VirtualAddress & SEG_MASK) >> SEG_SHIFT\r\n3    // now get offset\r\n4    Offset = VirtualAddress & OFFSET_MASK\r\n5    if (Offset >= Bounds[Segment])\r\n6        RaiseException(PROTECTION_FAULT)\r\n7    else\r\n8        PhysAddr = Base[Segment] + Offset\r\n9        Register = AccessMemory(PhysAddr)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c17\u7ae0-\u7a7a\u95f2\u7a7a\u95f4\u7ba1\u7406",children:"\u7b2c17\u7ae0 \u7a7a\u95f2\u7a7a\u95f4\u7ba1\u7406"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"typedef struct header_t { \r\n    int size;\r\n    int magic;\r\n} header_t;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"void free(void *ptr) {\r\n    header_t *hptr = (void *)ptr - sizeof(header_t);\r\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u5982\u4f55\u7406\u89e3 ",(0,i.jsx)(n.code,{children:"(void *)ptr"})," \uff1f\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u5c06\u4e00\u4e2a\u6307\u5411\u8981\u91ca\u653e\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\uff0c\u8f6c\u6362\u4e3a ",(0,i.jsx)(n.code,{children:"void"})," \u7c7b\u578b\u6307\u9488\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u5b9a\u4e49 ",(0,i.jsx)(n.code,{children:"header_t"})," \u7c7b\u578b\u7684 ",(0,i.jsx)(n.code,{children:"hptr"})," \u53d8\u91cf\uff0c\u51cf\u53bb\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53 ",(0,i.jsx)(n.code,{children:"header_t"})," \u7684\u5927\u5c0f\uff0c\u5f97\u5230\u5185\u5b58\u5757\u4e4b\u524d\u7684",(0,i.jsx)(n.strong,{children:"\u5934\u90e8\u4fe1\u606f\u7684\u8d77\u59cb\u5730\u5740"}),"\u3002"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\u672a\u7406\u89e3\u4ee5\u4e0b\u4ee3\u7801\u7684\u5185\u5d4c ",(0,i.jsx)(n.code,{children:"struct"})," \uff1a\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u4e3a\u4ec0\u4e48\u662f\u5f97\u5230 8 \u5b57\u8282\uff1f",(0,i.jsx)(n.code,{children:"node_t"})," \u521d\u59cb\u5316\u4e3a 4 + 4 \uff1f"]}),"\n",(0,i.jsx)(n.li,{children:"\u51e0\u79cd\u53c2\u6570\u5206\u522b\u662f\uff1f"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:"typedef struct node_t { \r\n    int size;\r\n    struct node_t *next;\r\n} node_t;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:"// mmap() returns a pointer to a chunk of free space \r\nnode_t *head = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_ANON|MAP_PRIVATE, -1, 0);\r\nhead->size = 4096 - sizeof(node_t); \r\nhead->next = NULL;\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c18\u7ae0-\u5206\u9875\u4ecb\u7ecd",children:"\u7b2c18\u7ae0 \u5206\u9875\uff1a\u4ecb\u7ecd"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-assembly",children:"movl <virtual address>, %eax\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-assembly",children:"movl 21, %eax\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:"VPN     = (VirtualAddress & VPN_MASK) >> SHIFT // VPN_MASK =  0x30 or 110000, SHIFT = 4\r\nPTEAddr = PageTableBaseRegister + (VPN * sizeof(PTE))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:"offset   = VirtualAddress & OFFSET_MASK \r\nPhysAddr = (PFN << SHIFT) | offset\r\n// Extract the VPN from the virtual address\r\nVPN = (VirtualAddress & VPN_MASK) >> SHIFT\r\n\r\n// Form the address of the page-table entry (PTE)\r\nPTEAddr = PTBR + (VPN * sizeof(PTE))\r\n\r\n// Fetch the PTE\r\nPTE = AccessMemory(PTEAddr)\r\n\r\n// Check if process can access the page\r\nif (PTE.Valid == False)\r\n    RaiseException(SEGMENTATION_FAULT)\r\nelse if (CanAccess(PTE.ProtectBits) == False)\r\n    RaiseException(PROTECTION_FAULT)\r\nelse\r\n    // Access is OK: form physical address and fetch it\r\n    offset   = VirtualAddress & OFFSET_MASK\r\n    PhysAddr = (PTE.PFN << PFN_SHIFT) | offset\r\n    Register = AccessMemory(PhysAddr)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u4e00\u4e2a\u662f\u53f3\u79fb\uff0c\u4e00\u4e2a\u662f\u5de6\u79fb\uff0c\u53ef\u5426\u7406\u89e3\u4e3a \u201c\u53f3\u79fb\u88c1\u526a\u4e86\u4e00\u90e8\u5206\uff0c\u5f97\u5230\u671f\u671b\u503c\u201d\uff0c\u201c\u53f3\u79fb\u4e5f\u88c1\u526a\u4e86\u4e00\u90e8\u5206\uff0c\u5f97\u5230\u671f\u671b\u503c\u201d\uff0c\u4e24\u8005\u5408\u5e76\u5f97\u5230\u6700\u7ec8\u671f\u671b\u7ed3\u679c\uff1f"}),"\n",(0,i.jsx)(n.li,{children:"\u63cf\u8ff0\u4e86\u5728\u6bcf\u4e2a\u5185\u5b58\u5f15\u7528\u4e0a\u53d1\u751f\u7684\u60c5\u51b5\u7684\u521d\u59cb\u534f\u8bae\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u5206\u9875\u90fd\u9700\u8981\u6211\u4eec\u6267\u884c\u4e00\u4e2a\u989d\u5916\u7684\u5185\u5b58\u5f15\u7528\uff0c\u4ee5\u4fbf\u9996\u5148\u4ece\u9875\u8868\u4e2d\u83b7\u53d6\u5730\u5740\u8f6c\u6362\u3002\u5f00\u9500\u5f88\u5927\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:"int array[1000];\r\n...\r\nfor (i = 0; i < 1000; i++) \r\n    array[i] = 0;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:"prompt> gcc -o array array.c -Wall -O \r\nprompt> ./array\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"objdump / otool \u53cd\u6c47\u7f16\uff08\u4ee5\u4e0b\u9700\u4e00\u70b9 x86 \u57fa\u7840\uff09"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-assembly",children:"0x1024 movl $0x0,(%edi,%eax,4) \r\n0x1028 incl %eax\r\n0x102c cmpl $0x03e8,%eax \r\n0x1030 jne 0x1024\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c19\u7ae0-\u5206\u9875\u5feb\u901f\u5730\u5740\u8f6c\u6362tlb",children:"\u7b2c19\u7ae0 \u5206\u9875\uff1a\u5feb\u901f\u5730\u5740\u8f6c\u6362\uff08TLB\uff09"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:"VPN = (VirtualAddress & VPN_MASK) >> SHIFT\r\n(Success, TlbEntry) = TLB_Lookup(VPN)\r\nif (Success == True)    // TLB Hit\r\n    if (CanAccess(TlbEntry.ProtectBits) == True)\r\n        Offset   = VirtualAddress & OFFSET_MASK\r\n        PhysAddr = (TlbEntry.PFN << SHIFT) | Offset\r\n        AccessMemory(PhysAddr)\r\n    else\r\n        RaiseException(PROTECTION_FAULT)\r\nelse    // TLB Miss\r\n    PTEAddr = PTBR + (VPN * sizeof(PTE))\r\n    PTE = AccessMemory(PTEAddr)\r\n    if (PTE.Valid == False)\r\n        RaiseException(SEGMENTATION_FAULT)\r\n    else if (CanAccess(PTE.ProtectBits) == False)\r\n        RaiseException(PROTECTION_FAULT)\r\n    else\r\n        TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits)\r\n        RetryInstruction()\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c20\u7ae0-\u5206\u9875\u8f83\u5c0f\u7684\u8868",children:"\u7b2c20\u7ae0 \u5206\u9875\uff1a\u8f83\u5c0f\u7684\u8868"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"SN           = (VirtualAddress & SEG_MASK) >> SN_SHIFT \r\nVPN          = (VirtualAddress & VPN_MASK) >> VPN_SHIFT \r\nAddressOfPTE = Base[SN] + (VPN * sizeof(PTE))\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6b64\u6bb5\u4ee3\u7801\uff0c\u53ef\u4ee5\u4e86\u89e3\u63a9\u7801\u7684\u610f\u4e49"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"PDEAddr = PageDirBase +\uff08PDIndex\xd7sizeof\uff08PDE\uff09\uff09\r\nPTEAddr = (PDE.PFN << SHIFT) + (PTIndex * sizeof(PTE))\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u5148\u7528\u4e00\u5b9a\u957f\u5ea6\u7684 VPN \u4f4d\u83b7\u53d6 PDE\uff0c\u518d\u7528\u5269\u4f59\u7684 VPN \u4f4d\u83b7\u53d6 PTE"}),"\n",(0,i.jsx)(n.li,{children:"\u4ece\u4e0b\u9762\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u4efb\u4f55\u590d\u6742\u7684\u591a\u7ea7\u9875\u8868\u8bbf\u95ee\u53d1\u751f\u4e4b\u524d\uff0c\u786c\u4ef6\u9996\u5148\u68c0\u67e5TLB\u3002\u5728\u547d\u4e2d\u65f6\uff0c\u7269\u7406\u5730\u5740\u76f4\u63a5\u5f62\u6210\uff0c\u800c\u4e0d\u50cf\u4e4b\u524d\u4e00\u6837\u8bbf\u95ee\u9875\u8868\u3002\u53ea\u6709\u5728TLB\u672a\u547d\u4e2d\u65f6\uff0c\u786c\u4ef6\u624d\u9700\u8981\u6267\u884c\u5b8c\u6574\u7684\u591a\u7ea7\u67e5\u627e\u3002\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\uff0c\u53ef\u4ee5\u770b\u5230\u4f20\u7edf\u7684\u4e24\u7ea7\u9875\u8868\u7684\u6210\u672c\uff1a\u4e24\u6b21\u989d\u5916\u7684\u5185\u5b58\u8bbf\u95ee\u6765\u67e5\u627e\u6709\u6548\u7684\u8f6c\u6362\u6620\u5c04\uff08\u7b2c 13  \u884c\u4e0e 21 \u884c\uff09\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"VPN = (VirtualAddress & VPN_MASK) >> SHIFT\r\n(Success, TlbEntry) = TLB_Lookup(VPN)\r\nif (Success == True)    // TLB Hit\r\n    if (CanAccess(TlbEntry.ProtectBits) == True)\r\n        Offset   = VirtualAddress & OFFSET_MASK\r\n        PhysAddr = (TlbEntry.PFN << SHIFT) | Offset\r\n        Register = AccessMemory(PhysAddr)\r\n    else\r\n        RaiseException(PROTECTION_FAULT)\r\nelse                  // TLB Miss\r\n    // first, get page directory entry\r\n    PDIndex = (VPN & PD_MASK) >> PD_SHIFT\r\n    PDEAddr = PDBR + (PDIndex * sizeof(PDE))\r\n    PDE     = AccessMemory(PDEAddr)\r\n    if (PDE.Valid == False)\r\n        RaiseException(SEGMENTATION_FAULT)\r\n    else\r\n        // PDE is valid: now fetch PTE from page table\r\n        PTIndex = (VPN & PT_MASK) >> PT_SHIFT\r\n        PTEAddr = (PDE.PFN << SHIFT) + (PTIndex * sizeof(PTE))\r\n        PTE     = AccessMemory(PTEAddr)\r\n        if (PTE.Valid == False)\r\n            RaiseException(SEGMENTATION_FAULT)\r\n        else if (CanAccess(PTE.ProtectBits) == False)\r\n            RaiseException(PROTECTION_FAULT)\r\n        else\r\n            TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits)\r\n            RetryInstruction()\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c21\u7ae0-\u8d85\u8d8a\u7269\u7406\u5185\u5b58\u673a\u5236",children:"\u7b2c21\u7ae0 \u8d85\u8d8a\u7269\u7406\u5185\u5b58\uff1a\u673a\u5236"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"VPN = (VirtualAddress & VPN_MASK) >> SHIFT\r\n(Success, TlbEntry) = TLB_Lookup(VPN)\r\nif (Success == True)    // TLB Hit\r\n    if (CanAccess(TlbEntry.ProtectBits) == True)\r\n        Offset     = VirtualAddress & OFFSET_MASK\r\n        PhysAddr   = (TlbEntry.PFN << SHIFT) | Offset\r\n        Register  = AccessMemory(PhysAddr)\r\n    else\r\n        RaiseException(PROTECTION_FAULT)\r\nelse                  // TLB Miss\r\n    PTEAddr = PTBR + (VPN * sizeof(PTE))\r\n    PTE = AccessMemory(PTEAddr)\r\n    if (PTE.Valid == False) // page not valid\r\n        RaiseException(SEGMENTATION_FAULT)\r\n    else\r\n        if (CanAccess(PTE.ProtectBits) == False)\r\n            RaiseException(PROTECTION_FAULT)\r\n        else if (PTE.Present == True) // page present and valid\r\n            // assuming hardware-managed TLB\r\n            TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits)\r\n            RetryInstruction()\r\n        else if (PTE.Present == False) // page error process\r\n            RaiseException(PAGE_FAULT)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7b2c13~14\uff0c\u786c\u4ef6\u6355\u83b7\u8fd9\u4e2a\u975e\u6cd5\u8bbf\u95ee\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9677\u9631\u5904\u7406\u7a0b\u5e8f\u8fd0\u884c\uff0c\u53ef\u80fd\u4f1a\u6740\u6b7b\u975e\u6cd5\u8fdb\u7a0b\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"// \u9875\u9519\u8bef\u63a7\u5236\u6d41\u7b97\u6cd5\uff08\u8f6f\u4ef6\uff09\r\nPFN = FindFreePhysicalPage()\r\nif (PFN == -1)               // no free page found\r\n    PFN = EvictPage()        // run replacement algorithm\r\nDiskRead(PTE.DiskAddr, pfn) // sleep (waiting for I/O)\r\nPTE.present = True           // update page table with present\r\nPTE.PFN     = PFN            // bit and translation (PFN)\r\nRetryInstruction()           // retry instruction\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u4ece\u4e0a\u56fe\u8f6f\u4ef6\u63a7\u5236\u6d41\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u4e3a\u4e86\u5904\u7406\u9875\u9519\u8bef\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5927\u81f4\u505a\u4e86\u4ec0\u4e48\u3002\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u9996\u5148\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u4e3a\u5c06\u8981\u6362\u5165\u7684\u9875\u627e\u5230\u4e00\u4e2a\u7269\u7406\u5e27\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u7269\u7406\u5e27\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u7b49\u5f85\u4ea4\u6362\u7b97\u6cd5\u8fd0\u884c\uff0c\u5e76\u4ece\u5185\u5b58\u4e2d\u8e22\u51fa\u4e00\u4e9b\u9875\uff0c\u91ca\u653e\u5e27\u4f9b\u8fd9\u91cc\u4f7f\u7528\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u5728\u83b7\u5f97\u7269\u7406\u5e27\u540e\uff0c\u5904\u7406\u7a0b\u5e8f\u53d1\u51fa I/O \u8bf7\u6c42\u4ece\u4ea4\u6362\u7a7a\u95f4\u8bfb\u53d6\u9875\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6700\u540e\uff0c\u5f53\u8fd9\u4e2a\u6162\u64cd\u4f5c\u5b8c\u6210\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u66f4\u65b0\u9875\u8868\u5e76\u91cd\u8bd5\u6307\u4ee4\u3002\u91cd\u8bd5\u5c06\u5bfc\u81f4TLB\u672a\u547d\u4e2d\uff0c\u7136\u540e\u518d\u4e00\u6b21\u91cd\u8bd5\u65f6\uff0cTLB \u547d\u4e2d\uff0c\u6b64\u65f6\u786c\u4ef6\u5c06\u80fd\u591f\u8bbf\u95ee\u6240\u9700\u7684\u503c\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c22\u7ae0-\u8d85\u8d8a\u7269\u7406\u5185\u5b58\u7b56\u7565",children:"\u7b2c22\u7ae0 \u8d85\u8d8a\u7269\u7406\u5185\u5b58\uff1a\u7b56\u7565"}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c23\u7ae0-vaxvms\u865a\u62df\u5185\u5b58\u7cfb\u7edf",children:"\u7b2c23\u7ae0 VAX/VMS\u865a\u62df\u5185\u5b58\u7cfb\u7edf"}),"\n",(0,i.jsx)(n.h3,{id:"\u7b2c24\u7ae0-\u5185\u5b58\u865a\u62df\u5316\u603b\u7ed3\u5bf9\u8bdd",children:"\u7b2c24\u7ae0 \u5185\u5b58\u865a\u62df\u5316\u603b\u7ed3\u5bf9\u8bdd"}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);